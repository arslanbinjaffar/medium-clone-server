import { z } from 'zod';

// _____________  Author Schema  _____________

export const authorSchema = z.object({
  firstName: z.string().min(1, { message: 'Your first name must be at least 1 characters long' }).max(30, {
    message: 'your first name cannot be longer than 30 characters',
  }),
  lastName: z.string().min(1, { message: 'Your last name must be at least 1 characters long' }).max(30, {
    message: 'your last name cannot be longer than 30 characters',
  }),
});



// _____________  User Schema  Login  _____________

const userBaseSchema = {
  email: z.string().email({ message: 'Invalid email address' }).max(50, {
    message: 'Email cannot be longer than 50 characters',
  }),
  password: z.string().min(8, { message: 'Password must be at least 8 characters long' }).max(50, {
    message: 'Password cannot be longer than 50 characters',
  }),
};

export const userSchema = z.object(userBaseSchema);

// _____________  User Update Schema   _____________

export const userUpdateSchema = z.object({
  ...userBaseSchema,
  fullName: z.string().min(1, { message: 'fullName must be at least 1 characters long' }).max(50, {
    message: 'fullName cannot be longer than 50 characters',
  }),
  email: z.string().email({ message: 'Invalid email address' }),
});


// _____________  blog Schema  create  _____________

export const blogCreateSchema = z.object({
  title: z.string().min(1, { message: 'title must be at least 1 characters long' }).max(50, {
    message: 'title cannot be longer than 50 characters',
  }),
  content: z.string().min(1, { message: 'content must be at least 1 characters long' }).max(500, {
    message: 'content cannot be longer than 500 characters',
  }),
})

// _____________  Export Types   _____________


export const completeBlogSchema = z.object({
  id: z.string(), // auto-generated by Prisma (cuid)
  title: z.string()
    .min(1, { message: "Title must be at least 1 character long" })
    .max(50, { message: "Title cannot be longer than 50 characters" }),
  content: z.string()
    .min(1, { message: "Content must be at least 1 character long" })
    .max(500, { message: "Content cannot be longer than 500 characters" }),
  authorId: z.string(), // foreign key for the related User
  // If these fields are optional (or auto-set), you can mark them as optional
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
});

export type TUserSchema = z.infer<typeof userSchema>;
export type TuserUpdateSchema = z.infer<typeof userUpdateSchema>;


export type TBlogCreateSchema = z.infer<typeof blogCreateSchema>;

export type TCompleteBlog = z.infer<typeof completeBlogSchema>;
